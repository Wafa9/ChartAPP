{"ast":null,"code":"import React, { useCallback, useMemo, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport range from 'lodash/range';\nimport { HOUR_BLOCK_HEIGHT } from \"./Packer\";\nimport { buildTimeString, calcTimeByPosition } from \"./helpers/presenter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    dimensionWidth = _Dimensions$get.width;\n\nvar TimelineHours = function TimelineHours(props) {\n  var format24h = props.format24h,\n      _props$start = props.start,\n      start = _props$start === void 0 ? 0 : _props$start,\n      _props$end = props.end,\n      end = _props$end === void 0 ? 24 : _props$end,\n      date = props.date,\n      styles = props.styles,\n      onBackgroundLongPress = props.onBackgroundLongPress,\n      onBackgroundLongPressOut = props.onBackgroundLongPressOut;\n  var lastLongPressEventTime = useRef();\n  var offset = HOUR_BLOCK_HEIGHT;\n  var EVENT_DIFF = 20;\n  var hours = useMemo(function () {\n    return range(start, end + 1).map(function (i) {\n      var timeText;\n\n      if (i === start) {\n        timeText = '';\n      } else if (i < 12) {\n        timeText = !format24h ? i + \" AM\" : i + \":00\";\n      } else if (i === 12) {\n        timeText = !format24h ? i + \" PM\" : i + \":00\";\n      } else if (i === 24) {\n        timeText = !format24h ? '12 AM' : '23:59';\n      } else {\n        timeText = !format24h ? i - 12 + \" PM\" : i + \":00\";\n      }\n\n      return {\n        timeText: timeText,\n        time: i\n      };\n    });\n  }, [start, end, format24h]);\n  var handleBackgroundPress = useCallback(function (event) {\n    var yPosition = event.nativeEvent.locationY;\n\n    var _calcTimeByPosition = calcTimeByPosition(yPosition, HOUR_BLOCK_HEIGHT),\n        hour = _calcTimeByPosition.hour,\n        minutes = _calcTimeByPosition.minutes;\n\n    lastLongPressEventTime.current = {\n      hour: hour,\n      minutes: minutes,\n      date: date\n    };\n    var timeString = buildTimeString(hour, minutes, date);\n    onBackgroundLongPress == null ? void 0 : onBackgroundLongPress(timeString, lastLongPressEventTime.current);\n  }, [onBackgroundLongPress, date]);\n  var handlePressOut = useCallback(function () {\n    if (lastLongPressEventTime.current) {\n      var _lastLongPressEventTi = lastLongPressEventTime.current,\n          hour = _lastLongPressEventTi.hour,\n          minutes = _lastLongPressEventTi.minutes,\n          _date = _lastLongPressEventTi.date;\n      var timeString = buildTimeString(hour, minutes, _date);\n      onBackgroundLongPressOut == null ? void 0 : onBackgroundLongPressOut(timeString, lastLongPressEventTime.current);\n      lastLongPressEventTime.current = undefined;\n    }\n  }, [onBackgroundLongPressOut, date]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onLongPress: handleBackgroundPress,\n      onPressOut: handlePressOut,\n      children: _jsx(View, {\n        style: StyleSheet.absoluteFillObject\n      })\n    }), hours.map(function (_ref, index) {\n      var timeText = _ref.timeText,\n          time = _ref.time;\n      return _jsxs(React.Fragment, {\n        children: [_jsx(Text, {\n          style: [styles.timeLabel, {\n            top: offset * index - 6\n          }],\n          children: timeText\n        }, \"timeLabel\" + time), time === start ? null : _jsx(View, {\n          style: [styles.line, {\n            top: offset * index,\n            width: dimensionWidth - EVENT_DIFF\n          }]\n        }, \"line\" + time), _jsx(View, {\n          style: [styles.line, {\n            top: offset * (index + 0.5),\n            width: dimensionWidth - EVENT_DIFF\n          }]\n        }, \"lineHalf\" + time)]\n      }, time);\n    }), _jsx(View, {\n      style: styles.verticalLine\n    })]\n  });\n};\n\nexport default React.memo(TimelineHours);","map":{"version":3,"sources":["/home/lamaaldohayan/Desktop/project/financeApp/node_modules/react-native-calendars/src/timeline/TimelineHours.js"],"names":["React","useCallback","useMemo","useRef","range","HOUR_BLOCK_HEIGHT","buildTimeString","calcTimeByPosition","Dimensions","get","dimensionWidth","width","TimelineHours","props","format24h","start","end","date","styles","onBackgroundLongPress","onBackgroundLongPressOut","lastLongPressEventTime","offset","EVENT_DIFF","hours","map","i","timeText","time","handleBackgroundPress","event","yPosition","nativeEvent","locationY","hour","minutes","current","timeString","handlePressOut","undefined","StyleSheet","absoluteFillObject","index","timeLabel","top","line","verticalLine","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef } from 'react';\nimport { View, Text, TouchableWithoutFeedback, Dimensions, StyleSheet } from 'react-native';\nimport range from 'lodash/range';\nimport { HOUR_BLOCK_HEIGHT } from './Packer';\nimport { buildTimeString, calcTimeByPosition } from './helpers/presenter';\nconst { width: dimensionWidth } = Dimensions.get('window');\nconst TimelineHours = (props) => {\n    const { format24h, start = 0, end = 24, date, styles, onBackgroundLongPress, onBackgroundLongPressOut } = props;\n    const lastLongPressEventTime = useRef();\n    // const offset = this.calendarHeight / (end - start);\n    const offset = HOUR_BLOCK_HEIGHT;\n    const EVENT_DIFF = 20;\n    const hours = useMemo(() => {\n        return range(start, end + 1).map(i => {\n            let timeText;\n            if (i === start) {\n                timeText = '';\n            }\n            else if (i < 12) {\n                timeText = !format24h ? `${i} AM` : `${i}:00`;\n            }\n            else if (i === 12) {\n                timeText = !format24h ? `${i} PM` : `${i}:00`;\n            }\n            else if (i === 24) {\n                timeText = !format24h ? '12 AM' : '23:59';\n            }\n            else {\n                timeText = !format24h ? `${i - 12} PM` : `${i}:00`;\n            }\n            return { timeText, time: i };\n        });\n    }, [start, end, format24h]);\n    const handleBackgroundPress = useCallback(event => {\n        const yPosition = event.nativeEvent.locationY;\n        const { hour, minutes } = calcTimeByPosition(yPosition, HOUR_BLOCK_HEIGHT);\n        lastLongPressEventTime.current = { hour, minutes, date };\n        const timeString = buildTimeString(hour, minutes, date);\n        onBackgroundLongPress?.(timeString, lastLongPressEventTime.current);\n    }, [onBackgroundLongPress, date]);\n    const handlePressOut = useCallback(() => {\n        if (lastLongPressEventTime.current) {\n            const { hour, minutes, date } = lastLongPressEventTime.current;\n            const timeString = buildTimeString(hour, minutes, date);\n            onBackgroundLongPressOut?.(timeString, lastLongPressEventTime.current);\n            lastLongPressEventTime.current = undefined;\n        }\n    }, [onBackgroundLongPressOut, date]);\n    return (<>\n      <TouchableWithoutFeedback onLongPress={handleBackgroundPress} onPressOut={handlePressOut}>\n        <View style={StyleSheet.absoluteFillObject}/>\n      </TouchableWithoutFeedback>\n      {hours.map(({ timeText, time }, index) => {\n            return (<React.Fragment key={time}>\n            <Text key={`timeLabel${time}`} style={[styles.timeLabel, { top: offset * index - 6 }]}>\n              {timeText}\n            </Text>\n            {time === start ? null : (<View key={`line${time}`} style={[styles.line, { top: offset * index, width: dimensionWidth - EVENT_DIFF }]}/>)}\n            {<View key={`lineHalf${time}`} style={[styles.line, { top: offset * (index + 0.5), width: dimensionWidth - EVENT_DIFF }]}/>}\n          </React.Fragment>);\n        })}\n      <View style={styles.verticalLine}/>\n    </>);\n};\nexport default React.memo(TimelineHours);\n"]},"metadata":{},"sourceType":"module"}