{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport default (function (props) {\n  var onChangeOffset = props.onChangeOffset,\n      scrollOffset = props.scrollOffset,\n      scrollViewRef = props.scrollViewRef;\n  var inMomentum = useRef(false);\n  useEffect(function () {\n    if (scrollOffset !== undefined) {\n      var _scrollViewRef$curren;\n\n      scrollViewRef == null ? void 0 : (_scrollViewRef$curren = scrollViewRef.current) == null ? void 0 : _scrollViewRef$curren.scrollTo({\n        y: scrollOffset,\n        animated: false\n      });\n    }\n  }, [scrollOffset]);\n  var onScrollEndDrag = useCallback(function (event) {\n    var offset = event.nativeEvent.contentOffset.y;\n    setTimeout(function () {\n      if (!inMomentum.current) {\n        onChangeOffset == null ? void 0 : onChangeOffset(offset);\n      }\n    }, 0);\n  }, []);\n  var onMomentumScrollBegin = useCallback(function () {\n    inMomentum.current = true;\n  }, []);\n  var onMomentumScrollEnd = useCallback(function (event) {\n    inMomentum.current = false;\n    onChangeOffset == null ? void 0 : onChangeOffset(event.nativeEvent.contentOffset.y);\n  }, [onChangeOffset]);\n  return {\n    scrollEvents: {\n      onScrollEndDrag: onScrollEndDrag,\n      onMomentumScrollBegin: onMomentumScrollBegin,\n      onMomentumScrollEnd: onMomentumScrollEnd\n    }\n  };\n});","map":{"version":3,"sources":["/home/lamaaldohayan/Desktop/project/financeApp/node_modules/react-native-calendars/src/timeline/useTimelineOffset.js"],"names":["useCallback","useEffect","useRef","props","onChangeOffset","scrollOffset","scrollViewRef","inMomentum","undefined","current","scrollTo","y","animated","onScrollEndDrag","event","offset","nativeEvent","contentOffset","setTimeout","onMomentumScrollBegin","onMomentumScrollEnd","scrollEvents"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,gBAAe,UAACC,KAAD,EAAW;AACtB,MAAQC,cAAR,GAAwDD,KAAxD,CAAQC,cAAR;AAAA,MAAwBC,YAAxB,GAAwDF,KAAxD,CAAwBE,YAAxB;AAAA,MAAsCC,aAAtC,GAAwDH,KAAxD,CAAsCG,aAAtC;AACA,MAAMC,UAAU,GAAGL,MAAM,CAAC,KAAD,CAAzB;AACAD,EAAAA,SAAS,CAAC,YAAM;AAGZ,QAAII,YAAY,KAAKG,SAArB,EAAgC;AAAA;;AAC5BF,MAAAA,aAAa,QAAb,qCAAAA,aAAa,CAAEG,OAAf,2CAAwBC,QAAxB,CAAiC;AAC7BC,QAAAA,CAAC,EAAEN,YAD0B;AAE7BO,QAAAA,QAAQ,EAAE;AAFmB,OAAjC;AAIH;AACJ,GATQ,EASN,CAACP,YAAD,CATM,CAAT;AAUA,MAAMQ,eAAe,GAAGb,WAAW,CAAC,UAACc,KAAD,EAAW;AAC3C,QAAMC,MAAM,GAAGD,KAAK,CAACE,WAAN,CAAkBC,aAAlB,CAAgCN,CAA/C;AACAO,IAAAA,UAAU,CAAC,YAAM;AACb,UAAI,CAACX,UAAU,CAACE,OAAhB,EAAyB;AACrBL,QAAAA,cAAc,QAAd,YAAAA,cAAc,CAAGW,MAAH,CAAd;AACH;AACJ,KAJS,EAIP,CAJO,CAAV;AAKH,GAPkC,EAOhC,EAPgC,CAAnC;AAQA,MAAMI,qBAAqB,GAAGnB,WAAW,CAAC,YAAM;AAC5CO,IAAAA,UAAU,CAACE,OAAX,GAAqB,IAArB;AACH,GAFwC,EAEtC,EAFsC,CAAzC;AAGA,MAAMW,mBAAmB,GAAGpB,WAAW,CAAC,UAACc,KAAD,EAAW;AAC/CP,IAAAA,UAAU,CAACE,OAAX,GAAqB,KAArB;AACAL,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAGU,KAAK,CAACE,WAAN,CAAkBC,aAAlB,CAAgCN,CAAnC,CAAd;AACH,GAHsC,EAGpC,CAACP,cAAD,CAHoC,CAAvC;AAIA,SAAO;AACHiB,IAAAA,YAAY,EAAE;AACVR,MAAAA,eAAe,EAAfA,eADU;AAEVM,MAAAA,qBAAqB,EAArBA,qBAFU;AAGVC,MAAAA,mBAAmB,EAAnBA;AAHU;AADX,GAAP;AAOH,CAnCD","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nexport default (props) => {\n    const { onChangeOffset, scrollOffset, scrollViewRef } = props;\n    const inMomentum = useRef(false);\n    useEffect(() => {\n        // NOTE: The main reason for this feature is to sync the offset\n        // between all of the timelines in the TimelineList component\n        if (scrollOffset !== undefined) {\n            scrollViewRef?.current?.scrollTo({\n                y: scrollOffset,\n                animated: false\n            });\n        }\n    }, [scrollOffset]);\n    const onScrollEndDrag = useCallback((event) => {\n        const offset = event.nativeEvent.contentOffset.y;\n        setTimeout(() => {\n            if (!inMomentum.current) {\n                onChangeOffset?.(offset);\n            }\n        }, 0);\n    }, []);\n    const onMomentumScrollBegin = useCallback(() => {\n        inMomentum.current = true;\n    }, []);\n    const onMomentumScrollEnd = useCallback((event) => {\n        inMomentum.current = false;\n        onChangeOffset?.(event.nativeEvent.contentOffset.y);\n    }, [onChangeOffset]);\n    return {\n        scrollEvents: {\n            onScrollEndDrag,\n            onMomentumScrollBegin,\n            onMomentumScrollEnd\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}